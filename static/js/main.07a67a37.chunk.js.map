{"version":3,"sources":["components/BackgroundContainer/index.js","components/ThumbnailNav/ThumbNailImage.js","components/ThumbnailNav/index.js","components/CssBackgroundPositioner/index.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["BackgroundContainer","backgroundStyle","backgroundImage","this","props","backgroundPosition","className","style","Component","ThumbNailImage","useState","top","left","focus","setFocus","useMousePosition","mousePosition","containerRef","ref","src","alt","onClick","event","x","y","elementHeight","elementWidth","xPct","toFixed","yPct","cssPosition","handleClick","ThumbnailNav","state","message","alertTimeoutId","handleInputChange","bind","handlePositionChange","onHandlePositionChange","target","value","URL","onHandleImageChange","error","clearInterval","timeoutId","setTimeout","setState","dimensions","call","type","onChange","CssBackgroundPositioner","handleImageChange","newImageUrl","console","log","JSON","stringify","newPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07a67a37.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class BackgroundContainer extends Component {\n\n  render() {\n    const backgroundStyle = {\n      backgroundImage: 'url(' + this.props.backgroundImage + ')',\n      backgroundPosition: this.props.backgroundPosition\n    }\n\n    return (\n      <div className=\"bg\" style={backgroundStyle}></div>\n    )\n  }\n}","import React, { useState } from 'react'\nimport useMousePosition from '@react-hook/mouse-position'\n\nconst ThumbNailImage = (props) => {\n\n  const [focus, setFocus] = useState({ top: '50%', left: '50%'})\n  const [mousePosition, containerRef] = useMousePosition(\n    0, // enterDelay\n    0, // leaveDelay\n    30 // fps\n  )\n\n  return (\n    <div ref={containerRef} className=\"thumb-nav-image\">\n      <img\n        src={props.src}\n        alt={props.alt}\n        onClick={\n            event => {\n              const { x, y, elementHeight, elementWidth } = mousePosition\n\n              const xPct = `${((x / elementWidth) * 100).toFixed(3)}%`\n              const yPct = `${((y / elementHeight) * 100).toFixed(3)}%`\n\n              const cssPosition = `${xPct} ${yPct}`\n              props.handleClick(cssPosition)\n              setFocus({\n                top: yPct,\n                left: xPct\n              })\n            }\n        }\n        />\n      <div className=\"thumb-nav-image__focus\" style={focus} />\n      {/* <small>Mouse Position {mousePosition.x + ', ' + mousePosition.y}</small> */}\n    </div>\n  )\n}\n\n\nexport default ThumbNailImage","import React, { Component } from 'react'\nimport ThumbNailImage from './ThumbNailImage'\n\nexport default class ThumbnailNav extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: null,\n      alertTimeoutId: null\n    }\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handlePositionChange = this.handlePositionChange.bind(this)\n\n  }\n\n  handlePositionChange(cssPosition) {\n    this.props.onHandlePositionChange(cssPosition)\n  }\n\n  handleInputChange(event) {\n\n    if (!event.target.value) return;\n\n    try {\n      // Use this as a quick check to see if URL looks ok.\n      const url = new URL(event.target.value); // eslint-disable-line no-unused-vars\n      this.props.onHandleImageChange(event.target.value)\n\n    } catch (error) {\n\n      clearInterval(this.state.alertTimeoutId)\n\n      const timeoutId = setTimeout(() => {\n        this.setState({ message: null })\n      }, 500);\n\n      this.setState({\n        message: 'Invalid URL. Please enter a valid one.',\n        alertTimeoutId: timeoutId\n      })\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"thumbnail\">\n        <h4>CSS Background Positioner</h4>\n        <p><strong>Click on the key image feature to get the background-position needed.</strong></p>\n\n\n        <ThumbNailImage\n          src={this.props.backgroundImage}\n          alt=\"Image Preview\"\n          handleClick={\n            (event, dimensions) => {\n              this.handlePositionChange.call(this, event, dimensions)\n            }\n          }\n        />\n          {/* {\n            dimensions => {\n            return (\n              <img src={this.props.backgroundImage} alt=\"\" onClick={ event => {\n                this.handlePositionChange(event, dimensions)\n              }} />\n            )\n          }\n        } */}\n\n      <p className=\"info\">background-position:<br />{this.props.backgroundPosition}</p>\n        <hr />\n        <p>Use your own Image<br />(paste in URL)</p>\n        <input type=\"text\" onChange={this.handleInputChange} />\n        { this.state.message && <div className=\"alert\">{this.state.message}</div> }\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport BackgroundContainer from '../BackgroundContainer'\nimport ThumbnailNav from '../ThumbnailNav'\nimport { DEFAULT_IMAGE } from '../../constants'\n\nexport default class CssBackgroundPositioner extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handlePositionChange = this.handlePositionChange.bind(this);\n\n    this.state = {\n      backgroundImage: DEFAULT_IMAGE\n    };\n\n  }\n\n  handleImageChange(newImageUrl) {\n    console.log(`handleImageChange(newImageUrl)\\n${ JSON.stringify(newImageUrl) }`)\n    this.setState({\n      backgroundImage: newImageUrl\n    })\n  }\n\n  handlePositionChange(newPosition) {\n    console.log(`handlePositionChange(newPosition)\\n${ newPosition }`)\n    this.setState({\n      backgroundPosition: newPosition\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <BackgroundContainer {...this.state} />\n        <ThumbnailNav {...this.state} onHandleImageChange={this.handleImageChange} onHandlePositionChange={this.handlePositionChange} />\n      </>\n    )\n  }\n}","export const DEFAULT_IMAGE = 'https://images.unsplash.com/reserve/sZdXEWxTZ6BxcBuj6HZP_DSC_0090.JPG?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&s=fccd8e474f845626f7c23b214a2f9823';","import React from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport CssBackgroundPositioner from './components/CssBackgroundPositioner'\n\nfunction App() {\n\n  return (\n    <main>\n      <CssBackgroundPositioner />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}